// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ContinuousQuery extends pulumi.CustomResource {
    /**
     * Get an existing ContinuousQuery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContinuousQueryState, opts?: pulumi.CustomResourceOptions): ContinuousQuery {
        return new ContinuousQuery(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'influxdb:index/continuousQuery:ContinuousQuery';

    /**
     * Returns true if the given object is an instance of ContinuousQuery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContinuousQuery {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContinuousQuery.__pulumiType;
    }

    public readonly database!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly query!: pulumi.Output<string>;

    /**
     * Create a ContinuousQuery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContinuousQueryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContinuousQueryArgs | ContinuousQueryState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ContinuousQueryState | undefined;
            inputs["database"] = state ? state.database : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["query"] = state ? state.query : undefined;
        } else {
            const args = argsOrState as ContinuousQueryArgs | undefined;
            if (!args || args.database === undefined) {
                throw new Error("Missing required property 'database'");
            }
            if (!args || args.query === undefined) {
                throw new Error("Missing required property 'query'");
            }
            inputs["database"] = args ? args.database : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["query"] = args ? args.query : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ContinuousQuery.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContinuousQuery resources.
 */
export interface ContinuousQueryState {
    readonly database?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly query?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContinuousQuery resource.
 */
export interface ContinuousQueryArgs {
    readonly database: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly query: pulumi.Input<string>;
}
