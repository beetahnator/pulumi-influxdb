// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package influxdb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The continuousQuery resource allows a continuous query to be created on an InfluxDB server.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-influxdb/blob/master/website/docs/r/continuous_query.html.markdown.
type ContinuousQuery struct {
	s *pulumi.ResourceState
}

// NewContinuousQuery registers a new resource with the given unique name, arguments, and options.
func NewContinuousQuery(ctx *pulumi.Context,
	name string, args *ContinuousQueryArgs, opts ...pulumi.ResourceOpt) (*ContinuousQuery, error) {
	if args == nil || args.Database == nil {
		return nil, errors.New("missing required argument 'Database'")
	}
	if args == nil || args.Query == nil {
		return nil, errors.New("missing required argument 'Query'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["database"] = nil
		inputs["name"] = nil
		inputs["query"] = nil
	} else {
		inputs["database"] = args.Database
		inputs["name"] = args.Name
		inputs["query"] = args.Query
	}
	s, err := ctx.RegisterResource("influxdb:index/continuousQuery:ContinuousQuery", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ContinuousQuery{s: s}, nil
}

// GetContinuousQuery gets an existing ContinuousQuery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContinuousQuery(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ContinuousQueryState, opts ...pulumi.ResourceOpt) (*ContinuousQuery, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["database"] = state.Database
		inputs["name"] = state.Name
		inputs["query"] = state.Query
	}
	s, err := ctx.ReadResource("influxdb:index/continuousQuery:ContinuousQuery", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ContinuousQuery{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ContinuousQuery) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ContinuousQuery) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The database for the continuous_query. This must be an existing influxdb database.
func (r *ContinuousQuery) Database() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["database"])
}

// The name for the continuous_query. This must be unique on the InfluxDB server.
func (r *ContinuousQuery) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The query for the continuous_query. 
func (r *ContinuousQuery) Query() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["query"])
}

// Input properties used for looking up and filtering ContinuousQuery resources.
type ContinuousQueryState struct {
	// The database for the continuous_query. This must be an existing influxdb database.
	Database interface{}
	// The name for the continuous_query. This must be unique on the InfluxDB server.
	Name interface{}
	// The query for the continuous_query. 
	Query interface{}
}

// The set of arguments for constructing a ContinuousQuery resource.
type ContinuousQueryArgs struct {
	// The database for the continuous_query. This must be an existing influxdb database.
	Database interface{}
	// The name for the continuous_query. This must be unique on the InfluxDB server.
	Name interface{}
	// The query for the continuous_query. 
	Query interface{}
}
